This program sorts text file.
If file size is over RAM (assign max size manually, 
  having in mind, that ex. file contains 100 strings by randomly 0-1024 symbols, its size will be about 50 Kb),
Program slpits it to slices.
These slices are sorted by two different algorhitms:
QUICK SORT (Native LINQ sorting) - when strings are evenly random.
INSERTION SORT (Custom) - when file is partly sorted.
To find out State of sorting, program uses variable, which increases with increasing sequences in file, 
and decrease with cuts of these sequences.
Maximum value of this variable is file size in strings, which says that file is sorted.
If value is around 0, we have evenly sorted file.
Pivot value of this variable to switch algorytms, 
  is counted experimentally (corellated with wrong string positions/number of increasing sequences):
  
  
  Running formula: 
  x * log (x) > (C - x) ^ 2, where
  C == File/List size in strings
  base of log == number of increasing sequences in list/file
  x == switcher between algotytms, equaling size of major increasing sequence in list/file.
  
This formula shows moment between two sorting algorytms, when difficulty of quicksort is more than insertion sort.
  
  
Also, if slice is already sorted, insertion sort will run it faster than quicksort.

If slicesize is more than file size, program just sorts it in LINQ sort mode.

In case of 2 properties to sort, program creates object TextRecord, to work with 2-parameter sort.

In case of output file could be same bigger than RAM, program uses string-by-string writing.
Queues technology implemented to increase speed of I/O.
